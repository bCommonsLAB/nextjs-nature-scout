import OpenAI from 'openai';
import { z } from "zod";
import { zodResponseFormat } from "openai/helpers/zod";
import { openAiResult, AnalyseErgebnis, NatureScoutData } from '@/types/nature-scout';
import { serverConfig } from '../config';

const openai = new OpenAI({
    apiKey: serverConfig.OPENAI_API_KEY
});

async function urlToBase64(url: string): Promise<string> {
  try {
    console.log('üîÑ Lade Bild:', url);
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    
    const arrayBuffer = await response.arrayBuffer();
    const base64String = Buffer.from(arrayBuffer).toString('base64');
    
    console.log('‚úÖ Base64 Konvertierung erfolgreich', {
      originalUrl: url,
      base64Length: base64String.length,
      isValidBase64: /^[A-Za-z0-9+/=]+$/.test(base64String)
    });
    
    return base64String;
  } catch (error) {
    console.error('‚ùå Fehler beim Laden der URL:', url, error);
    throw error;
  }
}

export async function analyzeImageStructured(metadata: NatureScoutData): Promise<openAiResult> {
    /*
    const zSchema = z.object({
        "analyses": z.array(z.object({
            "Pflanzen-Arten": z.array(z.string()).describe("Liste der erkannten Pflanzenarten"),
            "Vegetationsh√∂he": z.string().describe("Die H√∂he der Vegetation: Kurz (<10cm) - Mittel (10-30cm) - Hoch (>30cm)"),
            "Vegetationsdichte": z.string().describe("Die Dichte der Vegetation: D√ºnn - Mittel - Dicht"),
            "Vegetationsstruktur": z.string().describe("Die Struktur der Vegetation: Offen (Bestand l√ºcken aufweist - man sieht den Erdboden) - Mittel - Dicht(Bestand ist dicht und man sieht den Erdboden nicht)"),
            "Bl√ºhintensit√§t": z.string().describe("Keine Bl√ºten - Wenige Bl√ºten - Viele Bl√ºten"),
            "Habitat": z.string().describe("Ist es eines der folgenden Habitate? Entweder Magerwiese, Trockenrasen, Fettwiese, Magerweide, Fettweide, Niedermoor, Hochmoor, keines dieser Habitate?"),
            "Pros": z.string().optional().describe("Besondere Merkmale, die f√ºr dieses erkannte Habitat sprechen"),
            "Cons": z.string().optional().describe("Besondere Merkmale, die eher f√ºr einen anderen Habitat sprechen"),
            "Wahrscheinlichkeit": z.number().describe("Die Wahrscheinlichkeit, dass das Habitat richtig erkannt wurde")
          }))
    });
    */
    const zSchema = z.object({
        "analyses": z.array(z.object({
          "standort": z.object({
            "hangneigung": z.enum(["eben", "leicht_geneigt", "steil", "weis nicht"])
              .describe("Hangneigung des Gel√§ndes"),
            "exposition": z.enum(["N", "NO", "O", "SO", "S", "SW", "W", "NW", "weis nicht"])
              .describe("Ausrichtung des Hanges"),
            "bodenfeuchtigkeit": z.enum(["trocken", "frisch", "feucht", "nass", "wasserz√ºgig", "weis nicht"])
              .describe("Feuchtigkeit des Bodens")
          }),
          "pflanzenArten": z.array(
            z.object({
              "name": z.string().describe("Name der Pflanzenart in deutscher Sprache"),
              "h√§ufigkeit": z.enum(["einzeln", "zerstreut", "h√§ufig", "dominant"])
                .describe("H√§ufigkeit der Art im Bestand"),
              "istZeiger": z.boolean().optional()
                .describe("Ist die Art ein wichtiger Indikator?")
            })
          ).describe("Liste der erkannten Pflanzenarten mit Details, bitte nur die Arten auflisten, die eindeutig in den Bildern erkannt werden."),
          "Vegetationsstruktur": z.object({
            "h√∂he": z.enum(["kurz", "mittel", "hoch"])
              .describe("H√∂he des Hauptbestandes"),
            "dichte": z.enum(["d√ºnn", "mittel", "dicht"])
              .describe("Dichte der Vegetation"),
            "deckung": z.enum(["offen", "mittel", "geschlossen"])
              .describe("Bodendeckung der Vegetation")
          }),
          "bl√ºhaspekte": z.object({
            "intensit√§t": z.enum(["keine", "vereinzelt", "reich"])
              .describe("Intensit√§t der Bl√ºte"),
            "anzahlFarben": z.number()
              .int()
              .describe("Anzahl verschiedener Bl√ºtenfarben")
          }),
          "nutzung": z.object({
            "beweidung": z.boolean()
              .describe("Beweidungsspuren vorhanden"),
            "mahd": z.boolean()
              .describe("Mahdspuren vorhanden"),
            "d√ºngung": z.boolean()
              .describe("D√ºngungsspuren vorhanden")
          }),
          "habitatTyp": z.enum([
            "Magerwiese",
            "Trockenrasen",
            "Fettwiese",
            "Magerweide",
            "Fettweide",
            "Niedermoor",
            "Hochmoor",
            "sonstiges"
          ]).describe("Klassifizierung des Habitattyps"),
          "schutzstatus": z.object({
            "gesetzlich": z.number()
              .int()
              .describe("Mit welcher Wahrscheinlichkeit in Prozent ist es ein Habitat, der im Naturschutzgesetz angef√ºhrt ist - Nass- und Feuchtfl√§chen:Verlandungsbereiche von stehenden oder langsam flie√üenden Gew√§ssern, Schilf-, R√∂hricht- und Gro√üseggenbest√§nde, Feucht- und Nasswiesen mit Seggen und Binsen, Moore, Auw√§lder, Sumpf- und Bruchw√§lder, Quellbereiche, Naturnahe und unverbaute Bach- und Flussabschnitte sowie Wassergr√§ben inklusive der Ufervegetation. Bei Trockenstandorte: Trockenrasen, Felsensteppen, Lehmbr√ºche?"),
            "hochwertig": z.number()
              .int()
              .describe("Mit welcher Wahrscheinlichkeit in Prozent ist es ein √∂kologisch hochwertige Lebensraum, der nicht vom Gesetz erfasst ist: Magerwiese, Magerweide, Trockenrasen, Felsensteppen, Lehmbr√ºche?"),
            "standard": z.number()
              .int()
              .describe("Mit Welcher Wahrscheinlichkeit in Prozent ist es ein √∂kologisch nicht hochwertige Lebensraum, wie Fettwiese, Fettweide, Kunstrasen aller Art, Parkanlagen, Ruderalfl√§chen, u. a. Standardlebensraum?")
          }),
          "bewertung": z.object({
            "artenreichtum": z.number()
              .int()
              .describe("Gesch√§tzte Anzahl Arten pro 25m¬≤"),
            "konfidenz": z.number()
              .int()
              .describe("Konfidenz der Habitatbestimmung in Prozent")
          }),
          "evidenz": z.object({
            "daf√ºrSpricht": z.array(z.string())
              .describe("Merkmale, die f√ºr die Klassifizierung sprechen"),
            "dagegenSpricht": z.array(z.string())
              .describe("Merkmale, die gegen die Klassifizierung sprechen")
          }),
          "zusammenfassung": z.string()
              .describe("Wie k√∂nnte man das Habitat und die Einsch√§tzung des Schutzstatus zusammenfassen?")
        })
        )
    });

    try {
        
        console.log('üîÑ Starte Bildanalyse f√ºr URLs:', metadata.bilder);
        
        const imageBase64Contents = await Promise.all(
          metadata.bilder.map(bild => urlToBase64(bild.url))
        );

        const imageContents = imageBase64Contents.map(base64 => ({
            type: "image_url" as const,
            image_url: {
                url: `data:image/jpeg;base64,${base64}`,
                detail: "high" as const
            }
        }));

        console.log('‚úÖ Bildkonvertierung abgeschlossen', {
            numberOfImages: imageContents.length
        });

        const systemInstruction = `
            Du bist ein erfahrener Vegetations√∂kologe und sollst bei der Habitatanalyse unterst√ºtzen. 
            Ber√ºcksichtige die bereits bekannten Standortdaten und Pflanzenarten in deiner Analyse.
            Argumentiere wissenschaftlich fundiert und ber√ºcksichtige alle verf√ºgbaren Indizien 
            f√ºr eine m√∂glichst pr√§zise Einsch√§tzung.
        `.trim();
  
        const Question = `
            Analysiere die hochgeladenen Bilder unter Ber√ºcksichtigung der bekannten Geokoordinaten (${metadata.latitude}, ${metadata.longitude}), 
            Standort: ${metadata.standort} und der bereits identifizierten Pflanzenarten:
            ${metadata.bilder.map(bild => `${bild.analyse} `).join(', ')} 

            Bitte analysiere folgende Parameter:
            1. Erfasse die Standortbedingungen und deren Einfluss auf die Vegetation
            2. Identifiziere charakteristische Pflanzenarten und deren H√§ufigkeit
            3. Beschreibe die Vegetationsstruktur und -dynamik
            4. Dokumentiere Nutzungsspuren und deren Auswirkungen
            5. Leite daraus den wahrscheinlichen Habitattyp ab
            6. Bewerte die √∂kologische Qualit√§t und Schutzw√ºrdigkeit
            7. F√ºhre unterst√ºtzende und widersprechende Merkmale auf
            8. Sch√§tze die Konfidenz deiner Einordnung
        `.trim();
        console.log("Question: ", Question);
        console.log("OPENAI_VISION_MODEL: ", serverConfig.OPENAI_VISION_MODEL);

        const completion = await openai.chat.completions.create({
            model: serverConfig.OPENAI_VISION_MODEL,
            messages: [
                { 
                    role: "system", 
                    content: systemInstruction 
                },
                {
                    role: "user",
                    content: [
                        { 
                            type: "text", 
                            text: metadata.kommentar ? `${Question}\n\nZus√§tzliche Hinweis: ${metadata.kommentar}` : Question
                        },
                        ...imageContents
                    ],
                },
            ],
            response_format: zodResponseFormat(zSchema, "structured_analysis"),
            max_tokens: 2000,
        });
        const analysisResult =  completion.choices[0]?.message.content;
        if (analysisResult) {
            console.log("analysisResult", analysisResult);
            const parsedResult: AnalyseErgebnis = JSON.parse(analysisResult).analyses[0]; // Falls die Antwort ein JSON-String ist
            return { result: parsedResult, error: undefined};
        } else {
            return { result: null, error: "Keine Analyse verf√ºgbar."};
        };
    } catch (error: Error | unknown) {
        console.error('Fehler bei der Bildanalyse:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unbekannter Fehler';
        return {
            result: null,
            error: `Die Analyse ist fehlgeschlagen: ${errorMessage}`
        };
    }
} 