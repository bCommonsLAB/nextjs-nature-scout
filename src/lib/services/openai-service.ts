import OpenAI from 'openai';
import { z } from "zod";
import { openAiResult, AnalyseErgebnis, NatureScoutData } from '@/types/nature-scout';
import { serverConfig } from '../config';
import { zodToJsonSchema } from 'zod-to-json-schema';
import { zodResponseFormat } from "openai/helpers/zod";
import { ChatCompletionMessageParam } from 'openai/resources/index.mjs';
const openai = new OpenAI({
    apiKey: serverConfig.OPENAI_API_KEY
});

async function urlToBase64(url: string): Promise<string> {
  try {
    console.log('üîÑ Lade Bild:', url);
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    
    const arrayBuffer = await response.arrayBuffer();
    const base64String = Buffer.from(arrayBuffer).toString('base64');
    
    console.log('‚úÖ Base64 Konvertierung erfolgreich', {
      originalUrl: url,
      base64Length: base64String.length,
      isValidBase64: /^[A-Za-z0-9+/=]+$/.test(base64String)
    });
    
    return base64String;
  } catch (error) {
    console.error('‚ùå Fehler beim Laden der URL:', url, error);
    throw error;
  }
}

export async function analyzeImageStructured(metadata: NatureScoutData): Promise<openAiResult> {
    /*
    const zSchema = z.object({
        "analyses": z.array(z.object({
            "Pflanzen-Arten": z.array(z.string()).describe("Liste der erkannten Pflanzenarten"),
            "Vegetationsh√∂he": z.string().describe("Die H√∂he der Vegetation: Kurz (<10cm) - Mittel (10-30cm) - Hoch (>30cm)"),
            "Vegetationsdichte": z.string().describe("Die Dichte der Vegetation: D√ºnn - Mittel - Dicht"),
            "Vegetationsstruktur": z.string().describe("Die Struktur der Vegetation: Offen (Bestand l√ºcken aufweist - man sieht den Erdboden) - Mittel - Dicht(Bestand ist dicht und man sieht den Erdboden nicht)"),
            "Bl√ºhintensit√§t": z.string().describe("Keine Bl√ºten - Wenige Bl√ºten - Viele Bl√ºten"),
            "Habitat": z.string().describe("Ist es eines der folgenden Habitate? Entweder Magerwiese, Trockenrasen, Fettwiese, Magerweide, Fettweide, Niedermoor, Hochmoor, keines dieser Habitate?"),
            "Pros": z.string().optional().describe("Besondere Merkmale, die f√ºr dieses erkannte Habitat sprechen"),
            "Cons": z.string().optional().describe("Besondere Merkmale, die eher f√ºr einen anderen Habitat sprechen"),
            "Wahrscheinlichkeit": z.number().describe("Die Wahrscheinlichkeit, dass das Habitat richtig erkannt wurde")
          }))
    });
    */
    const zSchema = z.object({
      "analyses": z.array(z.object({
        "standort": z.object({
          "hangneigung": z.string()
            .describe("Beschreibe die Hangneigung des Gel√§ndes als 'eben', 'leicht geneigt', 'steil' oder 'weis nicht', wenn du dir nicht sicher bist"),
          "exposition": z.string()
            .describe("Beschreibe die Ausrichtung des Habitats als 'Nord', 'Nordost', 'Ost', 'S√ºdost', 'S√ºd', 'S√ºdwest', 'West', 'Nordwest' oder 'weis nicht', wenn du dir nicht sicher bist"),
          "bodenfeuchtigkeit": z.string()
            .describe("Beschreibe die Feuchtigkeit des Bodens als 'trocken', 'frisch', 'feucht', 'nass' oder 'wasserz√ºgig' oder 'weis nicht', wenn du dir nicht sicher bist"),
        }),/*
        "pflanzenArten": z.array(
          z.object({
            "name": z.string().describe("Name der Pflanzenart in deutscher Sprache"),
            "h√§ufigkeit": z.string()
              .describe("Beschreibe die H√§ufigkeit der Art im Bestand als 'einzeln', 'zerstreut', 'h√§ufig' oder 'dominant'"),
            "istZeiger": z.boolean().optional()
              .describe("Ist die Art ein wichtiger Indikator?")
          })
        ).describe("Liste der erkannten Pflanzenarten mit Details, bitte nur die Arten auflisten, die in der Fragestellung genannt wurden."),*/
        "Vegetationsstruktur": z.object({
          "h√∂he": z.string()
            .describe("Beschreibe die H√∂he des Hauptbestandes als 'kurz', 'mittel', 'hoch' oder 'weis nicht', wenn du dir nicht sicher bist"),
          "dichte": z.string()
            .describe("Beschreibe die Dichte der Vegetation als 'd√ºnn', 'mittel', 'dicht' oder 'weis nicht', wenn du dir nicht sicher bist"),
          "deckung": z.string()
            .describe("Beschreibe die Bodendeckung der Vegetation als 'offen', 'mittel', 'geschlossen' oder 'weis nicht', wenn du dir nicht sicher bist")
        }).describe("Beschreibe die Vegetationsstruktur."),
        "bl√ºhaspekte": z.object({
          "intensit√§t": z.string()
            .describe("Intensit√§t der Bl√ºte als 'keine', 'vereinzelt', 'reich' oder 'weis nicht', wenn du dir nicht sicher bist"),
          "anzahlFarben": z.number()
            .int()
            .describe("Anzahl verschiedener Bl√ºtenfarben")
        }).describe("Bitte die Bl√ºhaspekte beschreiben. Wenn nicht genau erkennbar, bitte 'weis nicht' angeben."),
        "nutzung": z.object({
          "beweidung": z.boolean()
            .describe("Beweidungsspuren vorhanden oder weis nicht, wenn du dir nicht sicher bist"),
          "mahd": z.boolean()
            .describe("Mahdspuren vorhanden oder weis nicht, wenn du dir nicht sicher bist"),
          "d√ºngung": z.boolean()
            .describe("D√ºngungsspuren vorhanden oder weis nicht, wenn du dir nicht sicher bist")
        }).describe("Bitte die Nutzungsspuren beschreiben. Wenn nicht genau erkennbar, bitte 'weis nicht' angeben."),
        "habitatTyp": z.string()
          .describe("Klassifizierung des Habitattyps nach 'Magerwiese', 'Trockenrasen', 'Fettwiese', 'Magerweide', 'Fettweide', 'Niedermoor', 'Hochmoor', 'Rasen' oder 'sonstiges', wenn es keines dieser Habitate ist oder du dir nicht sicher bist"),
        "schutzstatus": z.object({
          "gesetzlich": z.number()
            .int()
            .describe("Mit welcher Wahrscheinlichkeit in Prozent ist es ein Habitat, der im Naturschutzgesetz angef√ºhrt ist - Nass- und Feuchtfl√§chen:Verlandungsbereiche von stehenden oder langsam flie√üenden Gew√§ssern, Schilf-, R√∂hricht- und Gro√üseggenbest√§nde, Feucht- und Nasswiesen mit Seggen und Binsen, Moore, Auw√§lder, Sumpf- und Bruchw√§lder, Quellbereiche, Naturnahe und unverbaute Bach- und Flussabschnitte sowie Wassergr√§ben inklusive der Ufervegetation. Bei Trockenstandorte: Trockenrasen, Felsensteppen, Lehmbr√ºche?"),
          "hochwertig": z.number()
            .int()
            .describe("Mit welcher Wahrscheinlichkeit in Prozent ist es ein √∂kologisch hochwertige Lebensraum, der nicht vom Gesetz erfasst ist: Magerwiese, Magerweide, Trockenrasen, Felsensteppen, Lehmbr√ºche?"),
          "standard": z.number()
            .int()
            .describe("Mit Welcher Wahrscheinlichkeit in Prozent ist es ein √∂kologisch nicht hochwertige Lebensraum, wie Fettwiese, Fettweide, Kunstrasen aller Art, Parkanlagen, Ruderalfl√§chen, u. a. Standardlebensraum?")
        }),
        "bewertung": z.object({
          "artenreichtum": z.number()
            .int()
            .describe("Gesch√§tzte Anzahl Arten pro 25m¬≤"),
          "konfidenz": z.number()
            .int()
            .describe("Konfidenz der Habitatbestimmung in Prozent")
        }).describe("Bitte die Bewertung der √∂kologischen Qualit√§t und Schutzw√ºrdigkeit des Habitats beschreiben."),
        "glaubw√ºrdigkeit": z.object({
          "konsistenzBewertung": z.number()
            .int()
            .describe("Prozentuale Einsch√§tzung der Konsistenz (0-100%)"),
          "indikatorenF√ºrKonsistenz": z.array(z.string())
            .describe("Merkmale, die f√ºr die Konsistenz sprechen"),
          "indikatorenGegenKonsistenz": z.array(z.string())
            .describe("Merkmale, die gegen die Konsistenz sprechen")
        }).describe("Wie Konsistent ist das bereitgestellten Panoramabild, bereits erkannten Pflanzenarten, Standortdaten und Hinweise? "),
        "evidenz": z.object({
          "daf√ºrSpricht": z.array(z.string())
            .describe("Merkmale, die f√ºr die Klassifizierung sprechen"),
          "dagegenSpricht": z.array(z.string())
            .describe("Merkmale, die gegen die Klassifizierung sprechen")
        }),
        "zusammenfassung": z.string()
            .describe("Wie k√∂nnte man das Habitat und die Einsch√§tzung des Schutzstatus zusammenfassen?")
      })
      )
    });

    const jsonSchema = zodToJsonSchema(zSchema, 'analyseSchema');
    console.log(JSON.stringify(jsonSchema, null, 2));

    try {
        
        console.log('üîÑ Starte Bildanalyse f√ºr URLs:', metadata.bilder);
        
        const imageBase64Contents = await Promise.all(
          metadata.bilder.map(bild => urlToBase64(bild.url))
        );

        // Schwarzer 1x1 Pixel als Base64
        const DUMMY_IMAGE = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==";

        const imageContents = imageBase64Contents.length ? 
            imageBase64Contents.map(base64 => ({
                type: "image_url" as const,
                image_url: {
                    url: `data:image/jpeg;base64,${base64}`,
                    detail: "high" as const
                }
            })) : [{
                type: "image_url" as const,
                image_url: {
                    url: `data:image/png;base64,${DUMMY_IMAGE}`,
                    detail: "high" as const
                }
            }];

        console.log('‚úÖ Bildkonvertierung abgeschlossen', {
            numberOfImages: imageContents.length,
            isDummy: imageBase64Contents.length === 0
        });

        
        const randomId = Math.floor(Math.random() * 9000000000) + 1000000000;

        const llmSystemInstruction = `
[ID:${randomId}]
Du bist ein erfahrener Vegetations√∂kologe und sollst bei der Habitatanalyse unterst√ºtzen. 
Ber√ºcksichtige die bereits bekannten Standortdaten und Pflanzenarten in deiner Analyse.
argumentiere wissenschaftlich fundiert nur auf Basis der bereitgestellten Informationen.
        `.trim();
  
        
        const llmQuestion = `
[ID:${randomId}]
Analysiere das hochgeladenen Gesamtbild und einige Detailbilder ` +
/*`unter Ber√ºcksichtigung der bereits bekannten:` +
`- Geokoordinaten Latitude: (${metadata.latitude}, Longitude: ${metadata.longitude}), ` +
`- Standort: ${metadata.standort} ` +
`- bereits identifizierte Pflanzenarten:
${metadata.bilder
  .filter(bild => bild.analyse && bild.analyse.trim() !== '')
  .map(bild => bild.analyse)
  .join(', ')}
${metadata.bilder.some(bild => bild.analyse && bild.analyse.trim() !== '') ? '\n' : ''}
` + */
`Bitte analysiere folgende Parameter:
0. Sch√§tze die Konsistent der bereitgestellten Informationen 
1. Erfasse die Standortbedingungen und deren Einfluss auf die Vegetation
2. Wie h√§ufig sind die erkannten Pflanzenarten im Bestand
3. Beschreibe die Vegetationsstruktur und -dynamik
4. Dokumentiere Nutzungsspuren und deren Auswirkungen
5. Leite daraus den wahrscheinlichen Habitattyp ab
6. Bewerte die √∂kologische Qualit√§t und Schutzw√ºrdigkeit
7. F√ºhre unterst√ºtzende und widersprechende Merkmale auf
8. Sch√§tze die Konfidenz deiner Einordnung
${metadata.kommentar ? `Beachte bitte folgende zus√§tzliche Hinweise: ${metadata.kommentar}` : ''}
`.trim();


        console.log("Question", llmQuestion);

        const messages: ChatCompletionMessageParam[] = [{ 
              role: "system", 
              content: llmSystemInstruction // Allgemeine Anweisungen f√ºr das Modell
          },
          {
              role: "user",
              content: [
                  { 
                      type: "text", 
                      text: llmQuestion // Die aktuelle Benutzerfrage
                  },
                  ...imageContents // Zus√§tzliche Inhalte wie Bilder                  
              ],
          }
        ];

        const completion = await openai.chat.completions.create({
            model: serverConfig.OPENAI_VISION_MODEL,
            messages: messages,
            temperature: 0.1,
            top_p: 0.1,
            response_format: zodResponseFormat(zSchema, "structured_analysis"),
            max_tokens: 2000,
        });
        const usage = completion.usage;
        console.log("usage", usage);
        const analysisResult =  completion.choices[0]?.message.content;
        if (analysisResult) {
          console.log("analysisResult", analysisResult);
          const parsedResult: AnalyseErgebnis = {
                ...JSON.parse(analysisResult).analyses[0],
                kommentar: metadata.kommentar
            };
            
            return { 
                result: parsedResult,
                llmInfo: {
                    llmModelPflanzenErkennung: "PLANTNET",
                    llmModelHabitatErkennung: serverConfig.OPENAI_VISION_MODEL,
                    llmSystemInstruction: llmSystemInstruction,
                    llmQuestion: llmQuestion,
                    jsonSchema: JSON.stringify(jsonSchema, null, 2)
                }
            };
        } else {
            return { result: null, error: "Keine Analyse verf√ºgbar."};
        };
    } catch (error: Error | unknown) {
        console.error('Fehler bei der Bildanalyse:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unbekannter Fehler';
        return {
            result: null,
            error: `Die Analyse ist fehlgeschlagen: ${errorMessage}`
        };
    }
} 